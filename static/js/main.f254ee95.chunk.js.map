{"version":3,"sources":["utils/Neighbors.ts","components/Cell.tsx","components/Grid.tsx","App.tsx","utils/randomInput.ts","reportWebVitals.ts","index.tsx"],"names":["Neighbors","input","neighbors","this","Map","x","y","nodes","has","push","get","length","isValidCell","set","id","visited","result","createNodesMap","startNode","undefined","visitNodes","node","getDirectNeighbors","forEach","neighborNode","console","log","depthFirstSearch","_","key","Array","from","keys","split","map","number","parseInt","areEqual","prevProps","nextProps","value","hover","children","Cell","React","memo","onClick","onMouseEnter","onMouseLeave","handleClick","handleMouseEnter","handleMouseLeave","style","width","height","display","alignItems","justifyContent","color","background","Grid","size","useRef","useState","cellCount","setCellCount","cellHover","setCellHover","useEffect","current","handleOnCellClick","getNeighbors","count","handleOnCellMouseEnter","cells","handleOnCellMouseLeave","styles","boxShadow","gridTemplateColumns","gridTemplateRows","row","includes","Math","round","random","randomInput","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAMaA,EAAb,WAIE,WAAYC,GAAoB,yBAHxBA,WAGuB,OAFvBC,eAEuB,EAC7BC,KAAKF,MAAQA,EACbE,KAAKD,UAAY,IAAIE,IANzB,+CAmBE,SAAoBC,EAAWC,GAC7B,OAA4B,IAArBH,KAAKF,MAAMK,GAAGD,KApBzB,gCAuBE,SACEE,EACAF,EACAC,GAEA,IAAMJ,EAAqB,GAkB3B,OAhBIK,EAAMC,IAAN,UAAaH,EAAb,YAAkBC,EAAI,KACxBJ,EAAUO,KAAKF,EAAMG,IAAN,UAAaL,EAAb,YAAkBC,EAAI,KAGnCC,EAAMC,IAAN,UAAaH,EAAI,EAAjB,YAAsBC,KACxBJ,EAAUO,KAAKF,EAAMG,IAAN,UAAaL,EAAI,EAAjB,YAAsBC,KAGnCC,EAAMC,IAAN,UAAaH,EAAb,YAAkBC,EAAI,KACxBJ,EAAUO,KAAKF,EAAMG,IAAN,UAAaL,EAAb,YAAkBC,EAAI,KAGnCC,EAAMC,IAAN,UAAaH,EAAI,EAAjB,YAAsBC,KACxBJ,EAAUO,KAAKF,EAAMG,IAAN,UAAaL,EAAI,EAAjB,YAAsBC,KAGhCJ,IA9CX,4BAiDE,WAGE,IAFA,IAAMK,EAAQ,IAAIH,IAETE,EAAI,EAAGA,EAAIH,KAAKF,MAAMU,OAAQL,IACrC,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAKF,MAAMU,OAAQN,IAEjCF,KAAKS,YAAYP,EAAGC,IACtBC,EAAMM,IAAIb,EAAUc,GAAGT,EAAGC,GAAI,CAC5BD,IACAC,IACAS,SAAS,IAMjB,OAAOR,IAjEX,8BAqEE,SAAyBO,GAA6C,IAAD,OAC7DE,EAAS,IAAIZ,IACbG,EAAQJ,KAAKc,iBACbC,EAAYX,EAAMG,IAAII,GAE5B,QAAkBK,IAAdD,EAAJ,CAoBA,OAhBmB,SAAbE,EAAcC,GAClBA,EAAKN,SAAU,EADmB,IAE1BV,EAASgB,EAAThB,EAAGC,EAAMe,EAANf,EAEXU,EAAOH,IAAIb,EAAUc,GAAGT,EAAGC,GAAIe,GAEP,EAAKC,mBAAmBf,EAAOF,EAAGC,GAC1CiB,SAAQ,SAACC,GAClBA,EAAaT,SAChBK,EAAWI,MAKjBJ,CAAWF,GAEJF,KA9FX,0BAsGE,SAAoBF,GAAuB,IAAD,OACxC,GAAIX,KAAKD,UAAUM,IAAIM,GACrB,OAAOX,KAAKD,UAAUQ,IAAII,GAE1BW,QAAQC,IAAI,gCACZ,IAAMV,EAASb,KAAKwB,iBAAiBb,GAErC,YAAeK,IAAXH,GACFb,KAAKD,UAAUW,IAAIC,EAAI,IAChB,KAITE,EAAOO,SAAQ,SAACK,EAAGC,GACjB,EAAK3B,UAAUW,IAAIgB,EAAKC,MAAMC,KAAKf,EAAOgB,YAGrC7B,KAAKD,UAAUQ,IAAII,OAvHhC,iBASE,SAAiBT,EAAWC,GAC1B,MAAM,GAAN,OAAUD,EAAV,YAAeC,KAVnB,qBAaE,SAAsBQ,GAA+B,IAAD,EACnCA,EAAGmB,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAYC,SAASD,MADJ,mBAGlD,MAAO,CAH2C,eAbtD,K,OCMA,SAASE,EAASC,EAAuBC,GACvC,OACED,EAAUE,QAAUD,EAAUC,OAC9BF,EAAUxB,KAAOyB,EAAUzB,IAC3BwB,EAAUG,QAAUF,EAAUE,OAC9BH,EAAUI,WAAaH,EAAUG,SAQ9B,IAAMC,EAAOC,IAAMC,MACxB,YAA0E,IAAvEL,EAAsE,EAAtEA,MAAO1B,EAA+D,EAA/DA,GAAI2B,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,SAAUI,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC9CC,EAAc,SAACnC,GACL,IAAV0B,GACFM,EAAQhC,IAINoC,EAAmB,SAACpC,GACV,IAAV0B,GACFO,EAAajC,IAIXqC,EAAmB,SAACrC,GACV,IAAV0B,GACFQ,EAAalC,IAIXsC,EAAQ,CACZC,MAAO,GACPC,OAAQ,GACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAO,QACPC,WAAYlB,EAAQ,WAAuB,IAAVD,EAAc,SAAW,SAG5D,OACE,qBACEY,MAAOA,EACPN,QAAS,kBAAMG,EAAYnC,IAC3BiC,aAAc,kBAAMG,EAAiBpC,IACrCkC,aAAc,kBAAMG,EAAiBrC,IAJvC,SAMG4B,MAIPL,GCxDK,SAASuB,EAAT,GAA4C,IAA5B3D,EAA2B,EAA3BA,MAAO4D,EAAoB,EAApBA,KACtB3D,EAAY4D,mBAD8B,EAEdC,qBAFc,mBAEzCC,EAFyC,KAE9BC,EAF8B,OAGdF,mBAAmB,IAHL,mBAGzCG,EAHyC,KAG9BC,EAH8B,KAKhDC,qBAAU,WACRlE,EAAUmE,QAAU,IAAIrE,EAAUC,GAClCgE,OAAa9C,GACbgD,EAAa,MACZ,CAAClE,IAEJ,IAAMqE,EAAoB,SAACxD,GAAgB,IAAD,EAClCH,EAAM,UAAGT,EAAUmE,eAAb,aAAG,EAAmBE,aAAazD,GAAIH,OAE/CA,GACFsD,EAAa,CAAEnD,KAAI0D,MAAO7D,KAIxB8D,EAAyB,SAAC3D,GAAgB,IAAD,EACvC4D,EAAK,UAAGxE,EAAUmE,eAAb,aAAG,EAAmBE,aAAazD,GAE1C4D,GACFP,EAAaO,IAIXC,EAAyB,SAAC7D,GAC9BqD,EAAa,KAGTS,EAAS,CACbrB,QAAS,cACTsB,UAAW,wBACXC,oBAAoB,UAAD,OAAYjB,EAAZ,WACnBkB,iBAAiB,UAAD,OAAYlB,EAAZ,YAGlB,OACE,qBAAKT,MAAOwB,EAAZ,SACG3E,EAAMiC,KAAI,SAAC8C,EAAK1E,GAAN,OACT0E,EAAI9C,KAAI,SAACN,EAAGvB,GAAJ,OACN,cAACsC,EAAD,CAEE7B,GAAId,EAAUc,GAAGT,EAAGC,GACpBkC,MAAOvC,EAAMK,GAAGD,GAChBoC,MAAK,OAAEyB,QAAF,IAAEA,OAAF,EAAEA,EAAWe,SAASjF,EAAUc,GAAGT,EAAGC,IAC3CwC,QAASwB,EACTvB,aAAc0B,EACdzB,aAAc2B,EAPhB,SASG3E,EAAUc,GAAGT,EAAGC,MAAhB,OAAuB0D,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAWlD,MAAlC,OAAwCkD,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAWQ,QAR/CxE,EAAUc,GAAGT,EAAGC,YC9CjC,IACML,ECRC,SAAqB4D,GAG1B,IAFA,IAAM5D,EAAoB,GAEjBK,EAAI,EAAGA,EAAIuD,EAAMvD,IAAK,CAC7BL,EAAMK,GAAK,GACX,IAAK,IAAID,EAAI,EAAGA,EAAIwD,EAAMxD,IAExBJ,EAAMK,GAAGD,GAAK6E,KAAKC,MAAMD,KAAKE,UAIlC,OAAOnF,EDHKoF,CADD,IAWEC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC3B,EAAD,CAAM3D,MAAOA,EAAO4D,KANb,QEOE2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f254ee95.chunk.js","sourcesContent":["interface INode {\n  x: number;\n  y: number;\n  visited: boolean;\n}\n\nexport class Neighbors {\n  private input: number[][];\n  private neighbors: Map<string, string[]>;\n\n  constructor(input: number[][]) {\n    this.input = input;\n    this.neighbors = new Map<string, string[]>();\n  }\n\n  public static id(x: number, y: number): string {\n    return `${x}.${y}`;\n  }\n\n  public static idSplit(id: string): [number, number] {\n    const [x, y] = id.split(\".\").map((number) => parseInt(number));\n\n    return [x, y];\n  }\n\n  private isValidCell(x: number, y: number): boolean {\n    return this.input[y][x] === 1;\n  }\n\n  private getDirectNeighbors(\n    nodes: Map<string, INode>,\n    x: number,\n    y: number\n  ): INode[] {\n    const neighbors: INode[] = [];\n\n    if (nodes.has(`${x}.${y - 1}`)) {\n      neighbors.push(nodes.get(`${x}.${y - 1}`) as INode);\n    }\n\n    if (nodes.has(`${x + 1}.${y}`)) {\n      neighbors.push(nodes.get(`${x + 1}.${y}`) as INode);\n    }\n\n    if (nodes.has(`${x}.${y + 1}`)) {\n      neighbors.push(nodes.get(`${x}.${y + 1}`) as INode);\n    }\n\n    if (nodes.has(`${x - 1}.${y}`)) {\n      neighbors.push(nodes.get(`${x - 1}.${y}`) as INode);\n    }\n\n    return neighbors;\n  }\n\n  private createNodesMap(): Map<string, INode> {\n    const nodes = new Map<string, INode>();\n\n    for (let y = 0; y < this.input.length; y++) {\n      for (let x = 0; x < this.input.length; x++) {\n        // create nodes only for valid cells\n        if (this.isValidCell(x, y)) {\n          nodes.set(Neighbors.id(x, y), {\n            x,\n            y,\n            visited: false,\n          });\n        }\n      }\n    }\n\n    return nodes;\n  }\n\n  // implementation of https://en.wikipedia.org/wiki/Depth-first_search algorithm\n  private depthFirstSearch(id: string): Map<string, INode> | undefined {\n    const result = new Map<string, INode>();\n    const nodes = this.createNodesMap();\n    const startNode = nodes.get(id);\n\n    if (startNode === undefined) {\n      return;\n    }\n\n    const visitNodes = (node: INode) => {\n      node.visited = true;\n      const { x, y } = node;\n\n      result.set(Neighbors.id(x, y), node);\n\n      const directNeighbors = this.getDirectNeighbors(nodes, x, y);\n      directNeighbors.forEach((neighborNode) => {\n        if (!neighborNode.visited) {\n          visitNodes(neighborNode);\n        }\n      });\n    };\n\n    visitNodes(startNode);\n\n    return result;\n  }\n\n  /**\n   *\n   * @param id cell position as `x.y` string\n   * @returns array of all cell neighbors (including cell itself) as `x.y` string\n   */\n  public getNeighbors(id: string): string[] {\n    if (this.neighbors.has(id)) {\n      return this.neighbors.get(id) as string[];\n    } else {\n      console.log(\"=== run depthFirstSearch ===\");\n      const result = this.depthFirstSearch(id);\n\n      if (result === undefined) {\n        this.neighbors.set(id, []);\n        return [];\n      }\n\n      // memoization\n      result.forEach((_, key) => {\n        this.neighbors.set(key, Array.from(result.keys()));\n      });\n\n      return this.neighbors.get(id) as string[];\n    }\n  }\n}\n","import React from \"react\";\n\ninterface ICellProps {\n  value: number;\n  id: string;\n  hover: boolean;\n  onClick: (id: string) => void;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: (id: string) => void;\n  children: React.ReactNode;\n}\n\nfunction areEqual(prevProps: ICellProps, nextProps: ICellProps) {\n  if (\n    prevProps.value !== nextProps.value ||\n    prevProps.id !== nextProps.id ||\n    prevProps.hover !== nextProps.hover ||\n    prevProps.children !== nextProps.children\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nexport const Cell = React.memo(\n  ({ value, id, hover, children, onClick, onMouseEnter, onMouseLeave }) => {\n    const handleClick = (id: string) => {\n      if (value === 1) {\n        onClick(id);\n      }\n    };\n\n    const handleMouseEnter = (id: string) => {\n      if (value === 1) {\n        onMouseEnter(id);\n      }\n    };\n\n    const handleMouseLeave = (id: string) => {\n      if (value === 1) {\n        onMouseLeave(id);\n      }\n    };\n\n    const style = {\n      width: 50,\n      height: 50,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      color: \"white\",\n      background: hover ? \"seagreen\" : value === 1 ? \"tomato\" : \"white\",\n    };\n\n    return (\n      <div\n        style={style}\n        onClick={() => handleClick(id)}\n        onMouseEnter={() => handleMouseEnter(id)}\n        onMouseLeave={() => handleMouseLeave(id)}\n      >\n        {children}\n      </div>\n    );\n  },\n  areEqual\n);\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { Neighbors } from \"../utils/Neighbors\";\nimport { Cell } from \"./Cell\";\n\ninterface IGridProps {\n  input: number[][];\n  size: number;\n}\n\nexport function Grid({ input, size }: IGridProps) {\n  const neighbors = useRef<Neighbors>();\n  const [cellCount, setCellCount] = useState<{ id: string; count: number }>();\n  const [cellHover, setCellHover] = useState<string[]>([]);\n\n  useEffect(() => {\n    neighbors.current = new Neighbors(input);\n    setCellCount(undefined);\n    setCellHover([]);\n  }, [input]);\n\n  const handleOnCellClick = (id: string) => {\n    const length = neighbors.current?.getNeighbors(id).length;\n\n    if (length) {\n      setCellCount({ id, count: length });\n    }\n  };\n\n  const handleOnCellMouseEnter = (id: string) => {\n    const cells = neighbors.current?.getNeighbors(id);\n\n    if (cells) {\n      setCellHover(cells);\n    }\n  };\n\n  const handleOnCellMouseLeave = (id: string) => {\n    setCellHover([]);\n  };\n\n  const styles = {\n    display: \"inline-grid\",\n    boxShadow: \"10px 10px 0 lightgray\",\n    gridTemplateColumns: `repeat(${size}, 50px)`,\n    gridTemplateRows: `repeat(${size}, 50px)`,\n  };\n\n  return (\n    <div style={styles}>\n      {input.map((row, y) =>\n        row.map((_, x) => (\n          <Cell\n            key={Neighbors.id(x, y)}\n            id={Neighbors.id(x, y)}\n            value={input[y][x]}\n            hover={cellHover?.includes(Neighbors.id(x, y))}\n            onClick={handleOnCellClick}\n            onMouseEnter={handleOnCellMouseEnter}\n            onMouseLeave={handleOnCellMouseLeave}\n          >\n            {Neighbors.id(x, y) === cellCount?.id && cellCount?.count}\n          </Cell>\n        ))\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport { randomInput } from \"./utils/randomInput\";\nimport { Grid } from \"./components/Grid\";\n\nconst size = 10;\nconst input = randomInput(size);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid input={input} size={size} />\n    </div>\n  );\n}\n\nexport default App;\n","export function randomInput(size: number): number[][] {\n  const input: number[][] = [];\n\n  for (let y = 0; y < size; y++) {\n    input[y] = [];\n    for (let x = 0; x < size; x++) {\n      // insert 0 or 1\n      input[y][x] = Math.round(Math.random());\n    }\n  }\n\n  return input;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}